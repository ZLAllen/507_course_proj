    os << "module <MODULENAME>(clk, reset, s_valid, m_ready, data_in, m_valid, s_ready, data_out); " << endl;
    os << "   parameter M = <ROW>; " << endl;
    os << "   parameter N = <COLUMN>; " << endl;
    os << "   parameter T = <BITWIDTH>; " << endl;
    os << "   parameter logW = $clog2(M*N+1), logN = $clog2(N+1), logM = $clog2(M+1); " << endl;
    os << "   input clk, reset; " << endl;
    os << " " << endl;
    os << "   input s_valid; " << endl;
    os << "   input [T-1:0] data_in; " << endl;
    os << "   output logic s_ready; " << endl;
    os << "    " << endl;
    os << "   input 	m_ready; " << endl;
    os << "   output logic m_valid; " << endl;
    os << "   output signed [T-1:0] data_out; " << endl;
    os << "   " << endl;
    os << "   logic [logN-1:0]	addr_x; " << endl;
    os << "   logic [logM-1:0]     addr_b; " << endl;
    os << "   logic [logW-1:0] 	addr_w; " << endl;
    os << "   logic 		clear_acc, wr_en_x, wr_en_y; " << endl;
    os << "    " << endl;
    os << "   datapath #(M,N,T) d(clk, clear_acc, data_in, data_out, wr_en_x, wr_en_y, addr_x, addr_w, addr_b, m_valid, m_ready); " << endl;
    os << "   ctrlpath #(M,N,T) c(clk, reset, s_valid, s_ready, m_valid, m_ready, clear_acc,wr_en_x, wr_en_y, addr_x, addr_w, addr_b); " << endl;
    os << "    " << endl;
    os << "endmodule " << endl;
    os << " " << endl;
    os << "module memory(clk, data_in, data_out, addr, wr_en); " << endl;
    os << "   parameter WIDTH=16, SIZE=64, LOGSIZE=6; " << endl;
    os << "   input [WIDTH-1:0] data_in; " << endl;
    os << "   output logic [WIDTH-1:0] data_out; " << endl;
    os << "   input [LOGSIZE-1:0] 	    addr; " << endl;
    os << "   input 		    clk, wr_en; " << endl;
    os << "   logic [SIZE-1:0][WIDTH-1:0] mem; " << endl;
    os << "   always_ff @(posedge clk) begin " << endl;
    os << "      data_out <= mem[addr]; " << endl;
    os << "      if (wr_en) " << endl;
    os << "	mem[addr] <= data_in; " << endl;
    os << "   end " << endl;
    os << "endmodule " << endl;
    os << " " << endl;
    os << "module datapath(clk, clear_acc, data_in, data_out, wr_en_x, wr_en_y, addr_x, addr_w, addr_b, m_valid, m_ready); " << endl;
    os << " " << endl;
    os << "   parameter M = 3, N = 3, T = 16; " << endl;
    os << "   parameter logW = $clog2(M*N+1), logN = $clog2(N+1), logM = $clog2(M+1); " << endl;
    os << " " << endl;
    os << "   input clk, clear_acc, wr_en_x, wr_en_y, m_valid, m_ready; " << endl;
    os << "   input [T-1:0] data_in; " << endl;
    os << "   output logic signed [T-1:0] data_out; " << endl;
    os << "   logic signed [T-1:0]        data_out_x, data_out_w; " << endl;
    os << "   logic [T-1:0] 	      data_out_b; " << endl;
    os << "   logic signed [T-1:0]       f, mul_out, adder, mul_out_save; " << endl;
    os << "   input logic [logN-1:0]     addr_x; " << endl;
    os << "   input logic [logM-1:0]     addr_b; " << endl;
    os << "   input logic [logW-1:0]     addr_w; " << endl;
    os << "   logic 		      delay; " << endl;
    os << "   logic 		      clear_acc_delay; " << endl;
    os << "    " << endl;
    os << "   memory #(T,N, logN)  mem_x(clk, data_in, data_out_x, addr_x, wr_en_x); // memory Instantaion for colum matrix " << endl;
    os << "  //They will be ROMMMMMMMMM " << endl;
    os << "   <WROMNAME> mem_w(clk, addr_w, data_out_w); // memory Instantation 4*4 matrix " << endl;
    os << "   <BROMNAME> mem_b(clk, addr_b, data_out_b);  // bias memory " << endl;
    os << " " << endl;
    os << "   always_ff @(posedge clk) begin " << endl;
    os << "      if (clear_acc)	 " << endl;
    os << "	//f <= {8'b0,data_out_b}; " << endl;
    os << "        f <= data_out_b; " << endl;
    os << "      else if  " << endl;
    os << "	(m_valid && !m_ready || delay) f <= f; " << endl;
    os << "      else  " << endl;
    os << "	f <= adder; " << endl;
    os << "      clear_acc_delay <= clear_acc; " << endl;
    os << "   end " << endl;
    os << " " << endl;
    os << "   always_ff @(posedge clk) begin " << endl;
    os << "      delay <= (m_valid && !m_ready); " << endl;
    os << "   end " << endl;
    os << " " << endl;
    os << "   always_comb begin " << endl;
    os << "      if (delay)  " << endl;
    os << "	mul_out = mul_out_save; " << endl;
    os << "      else  " << endl;
    os << "	mul_out = data_out_x * data_out_w;	 " << endl;
    os << "      adder = mul_out + f; " << endl;
    os << "   end " << endl;
    os << " " << endl;
    os << "   always_ff @(posedge clk) begin " << endl;
    os << "      if (clear_acc_delay)  " << endl;
    os << "	mul_out_save <= mul_out; " << endl;
    os << "   end " << endl;
    os << "    " << endl;
    os << "   always_ff @(posedge clk) begin " << endl;
    os << "      if (wr_en_y) begin " << endl;
    os << "          if (f > 0) begin " << endl;
    os << "              data_out <= f; " << endl;
    os << "          end else begin " << endl;
    os << "              data_out <= 0; " << endl;
    os << "          end " << endl;
    os << "      end " << endl;
    os << "      else if (m_valid && !m_ready)	 " << endl;
    os << "	data_out <= data_out; " << endl;
    os << "      else data_out <= 0; " << endl;
    os << "   end " << endl;
    os << "    " << endl;
    os << "    " << endl;
    os << "endmodule " << endl;
    os << " " << endl;
    os << "module ctrlpath(clk, reset, s_valid, s_ready, m_valid, m_ready, clear_acc, wr_en_x, wr_en_y, addr_x, addr_w, addr_b); " << endl;
    os << " " << endl;
    os << "   parameter M = 3, N = 3, T = 16; " << endl;
    os << "   parameter logW = $clog2(M*N+1), logN = $clog2(N+1), logM = $clog2(M+1); " << endl;
    os << "   input clk, reset; " << endl;
    os << "   input s_valid, m_ready; " << endl;
    os << "   output logic s_ready, m_valid; " << endl;
    os << "   output logic clear_acc, wr_en_x, wr_en_y; " << endl;
    os << "   logic [3:0] 	state, next_state; " << endl;
    os << "    " << endl;
    os << " " << endl;
    os << "   output logic [logN-1:0] addr_x; " << endl;
    os << "   output logic [logM-1:0] addr_b; " << endl;
    os << "   output logic [logW-1:0] addr_w; " << endl;
    os << "   logic [logW:0] 	   addr_w2; " << endl;
    os << "   logic 	      last_state2, clear_acc_delay, state2to3, state2to4; " << endl;
    os << "   logic [logM-1:0] 	      out_count;  " << endl;
    os << "    " << endl;
    os << "   assign addr_w = addr_w2[logW-1:0]; " << endl;
    os << "    " << endl;
    os << "   always_ff @ (posedge clk) begin " << endl;
    os << "      if (reset) begin " << endl;
    os << "	 state <=0;  " << endl;
    os << "      end		 " << endl;
    os << "      else  " << endl;
    os << "	state <= next_state; 	 " << endl;
    os << "   end " << endl;
    os << " " << endl;
    os << "   // Logic for addr_x " << endl;
    os << "   always_ff @ (posedge clk) begin " << endl;
    os << "      if (reset) addr_x <= 0; " << endl;
    os << "      else begin " << endl;
    os << "	 if (wr_en_x || (state==4 && !(m_valid && !m_ready)))  " << endl;
    os << "	   addr_x <= addr_x + 1; " << endl;
    os << "	 else if (state==7 || state2to4 || state2to3)  " << endl;
    os << "	   addr_x <= 0; " << endl;
    os << "      end " << endl;
    os << "   end " << endl;
    os << " " << endl;
    os << "   // Logic for out_count " << endl;
    os << "   always_ff @ (posedge clk) begin " << endl;
    os << "      if (reset)  " << endl;
    os << "	out_count <= 0; " << endl;
    os << "      else begin " << endl;
    os << "	 if (state == 5)  " << endl;
    os << "	   out_count <= out_count + 1; " << endl;
    os << "	 else if (state == 7)  " << endl;
    os << "	   out_count <= 0; " << endl;
    os << "      end " << endl;
    os << "   end " << endl;
    os << " " << endl;
    os << "   // Logic for addr_b " << endl;
    os << "   always_ff @ (posedge clk) begin " << endl;
    os << "      if (reset)  " << endl;
    os << "	addr_b <= 0; " << endl;
    os << "      else begin " << endl;
    os << "	 if ((clear_acc_delay && !(m_valid && !m_ready)) || (m_ready && m_valid && state != 7 && !clear_acc))  " << endl;
    os << "	   addr_b <= addr_b + 1; " << endl;
    os << "	 else if (state==3 || state == 7)  " << endl;
    os << "	   addr_b <= 0; " << endl;
    os << "      end " << endl;
    os << "   end " << endl;
    os << " " << endl;
    os << "   // Logic for addr_w " << endl;
    os << "   always_ff @ (posedge clk) begin " << endl;
    os << "      if (reset) addr_w2 <= 0; " << endl;
    os << "      else begin " << endl;
    os << "	 if ((state==4 && !(m_valid && !m_ready))) addr_w2 <= addr_w2 + 1; " << endl;
    os << "	 else if (last_state2 || state == 7) addr_w2 <= 0; " << endl;
    os << "	 else addr_w2 <= addr_w2; " << endl;
    os << "      end " << endl;
    os << "   end " << endl;
    os << "    " << endl;
    os << "   always_ff @ (posedge clk) begin " << endl;
    os << "      if (reset) clear_acc <= 1; " << endl;
    os << "      else if (state2to3 || state == 2) begin clear_acc <=1; end " << endl;
    os << "      else begin clear_acc <=0; end " << endl;
    os << "   end " << endl;
    os << "    " << endl;
    os << "   always_ff @ (posedge clk) begin " << endl;
    os << "      if (state == 5) begin wr_en_y <= 1; end " << endl;
    os << "      else begin wr_en_y <= 0; end " << endl;
    os << "   end " << endl;
    os << "    " << endl;
    os << "   always_ff @ (posedge clk) begin " << endl;
    os << "      clear_acc_delay<= (clear_acc && state == 4); " << endl;
    os << "   end " << endl;
    os << "    " << endl;
    os << "   always_ff @ (posedge clk) begin " << endl;
    os << "      if (reset) m_valid <= 0; " << endl;
    os << "      else begin " << endl;
    os << "	 if (m_valid && !m_ready)	m_valid <= m_valid; " << endl;
    os << "	 else  	m_valid <= wr_en_y; " << endl;
    os << "      end " << endl;
    os << "   end " << endl;
    os << "    " << endl;
    os << "    " << endl;
    os << "    " << endl;
    os << "   always_comb begin	state2to3 = 0; state2to4 = 0; " << endl;
    os << " " << endl;
    os << "      // wait for valid input " << endl;
    os << "      if (state==0) begin " << endl;
    os << "	 if (s_valid) begin " << endl;
    os << "	    next_state = 3; " << endl;
    os << "	 end " << endl;
    os << "	 else begin " << endl;
    os << "	    next_state = 0; " << endl;
    os << "	 end " << endl;
    os << "	  " << endl;
    os << "      end " << endl;
    os << "/* " << endl;
    os << "      // accepting W input; stay here until we get all of W matrix " << endl;
    os << "      else if (state == 1) begin " << endl;
    os << "	 if (addr_w2 < 9) begin	 " << endl;
    os << "	    next_state = 1; " << endl;
    os << "	 end " << endl;
    os << "	 else begin " << endl;
    os << "	    next_state = 2; " << endl;
    os << "	 end		 " << endl;
    os << "      end	 " << endl;
    os << " " << endl;
    os << "      // accepting b input; stay here until we get all of b vector " << endl;
    os << "      else if (state == 2) begin " << endl;
    os << "	 if (addr_b < 3)  " << endl;
    os << "	   next_state = 2; " << endl;
    os << "	 else begin " << endl;
    os << "	    next_state = 3;  " << endl;
    os << "	 end " << endl;
    os << "      end	 " << endl;
    os << "*/ " << endl;
    os << "      // accepting x input; stay here until we get all of x vector " << endl;
    os << "      else if (state == 3) begin " << endl;
    os << "	 if (addr_x < N)  " << endl;
    os << "	   next_state = 3; " << endl;
    os << "	 else begin " << endl;
    os << "	    next_state = 4;  " << endl;
    os << "	    state2to3 = 1; " << endl;
    os << "	 end " << endl;
    os << "      end			 " << endl;
    os << " " << endl;
    os << "      // computing one output; stay here until we get to the end of the matrix row " << endl;
    os << "      else if (state == 4) begin " << endl;
    os << "	 if (addr_x < N-1)  " << endl;
    os << "	   next_state = 4; " << endl;
    os << "	 else  " << endl;
    os << "	    next_state = 5; " << endl;
    os << "      end " << endl;
    os << "      // finish the row; check if we are done with the matrix yet; if not, go back to state 4 " << endl;
    os << "      else if (state == 5) begin " << endl;
    os << "	 if (out_count < M-1)  " << endl;
    os << "	   next_state = 2; " << endl;
    os << "	 else  " << endl;
    os << "	   next_state = 6; " << endl;
    os << "      end " << endl;
    os << " " << endl;
    os << "      else if (state == 2) begin " << endl;
    os << "          next_state = 4; " << endl;
    os << "          state2to4 = 1; " << endl;
    os << "      end " << endl;
    os << " " << endl;
    os << "      // wait one cycle " << endl;
    os << "      else if (state == 6) " << endl;
    os << "	next_state = 7; " << endl;
    os << " " << endl;
    os << "      // wait until we transfer the last output word " << endl;
    os << "      else if (state == 7) begin " << endl;
    os << "	 if (m_ready && m_valid)	 " << endl;
    os << "	   next_state = 0; " << endl;
    os << "	 else  " << endl;
    os << "	   next_state = 7; " << endl;
    os << "      end " << endl;
    os << "       " << endl;
    os << "      else next_state = 0; " << endl;
    os << "       " << endl;
    os << "       " << endl;
    os << "       " << endl;
    os << "   end " << endl;
    os << " " << endl;
    os << "   // write to W memory when we are in state 1 and get valid data " << endl;
    os << "  // assign wr_en_w  = (next_state == 1 && s_valid); " << endl;
    os << "    " << endl;
    os << "   // write to b memory when we are in state 2 and get valid data " << endl;
    os << "   //assign wr_en_b  = (next_state == 2 && s_valid); " << endl;
    os << " " << endl;
    os << "   // write to x memory when we are in state 3 and get valid data " << endl;
    os << "   assign wr_en_x = (next_state == 3 && s_valid); " << endl;
    os << " " << endl;
    os << "   // 1 cycle before 1st state 3 to set addr_b=0; " << endl;
    os << "   assign last_state2  = (state2to3 && next_state==4); " << endl;
    os << " " << endl;
    os << "   // assert s_ready when we are not reseting and our next state will be 0, 1, 2, or 3. " << endl;
    os << "   assign s_ready = ((next_state == 3 || state == 0) && !reset); " << endl;
    os << "    " << endl;
    os << "endmodule " << endl;
    os << " " << endl;
    os << " " << endl;
    os << " " << endl;
